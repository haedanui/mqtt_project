@startuml

abstract class Node {
    UUID id;
    long createdTime;
}

abstract class ActiveNode {
    Thread thread;
    long startTime;

    abstract void process();

    preprocess();
    postprocess();

}

class Wire {
    BlockingQueue<JSONObject> q;
    UUID id;

    int hashCode();
    boolean equals();
}

interface Output {
    wireOut();
}

interface Input {
    void wireIn();
}

interface Consumer {
}

class FunctionNode {
    Hashset<Wire> inWires;
    Hashset<Wire> outWires;

    void preprocess();
    void postprocess();
}

class MqttInNode {
    Hashset<Wire> outWires;
}

class MqttOutNode {
    Hashset<Wire> inWires;
}

class DebugNode {
    Hashset<Wire> outWires;
}

Node <|-- MqttInNode
Node <|-- MqttOutNode
Node <|-- FunctionNode
Node <|-- DebugNode

Output <|.. MqttInNode
Input <|.. MqttOutNode

Output <|.. FunctionNode
Input <|.. FunctionNode
Input <|.. DebugNode

Wire *-- FunctionNode
Wire *-- MqttInNode
Wire *-- MqttOutNode
Wire *-- DebugNode

FunctionNode <|-- postprocessor


@enduml