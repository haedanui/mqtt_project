@startuml

abstract class Node {
    UUID id;
    Thread thread;
    long createdTime;

    abstract void process();
}

class Wire {
    BlockingQueue<JSONObject> q;
    UUID id;

    int hashCode();
    boolean equals();
}

interface Output {
    wireOut();
}

interface Input {
    void wireIn();
}

interface Executable {
    JSONObject execute();
}

class FunctionNode {
    Hashset<Wire> inWires;
    Hashset<Wire> outWires;

    void preprocess();
    void postprocess();
}

class MqttInNode {
    Hashset<Wire> outWires;
}

class MqttOutNode {
    Hashset<Wire> inWires;
}

class DebugNode {
    Hashset<Wire> outWires;
}

Node <|-- MqttInNode
Node <|-- MqttOutNode
Node <|-- FunctionNode
Node <|-- DebugNode

Output <|.. MqttInNode
Input <|.. MqttOutNode

Output <|.. FunctionNode
Input <|.. FunctionNode
Input <|.. DebugNode

Executable <|.. preprocessor
Executable <|.. postprocessor

Wire *-- FunctionNode
Wire *-- MqttInNode
Wire *-- MqttOutNode
Wire *-- DebugNode


@enduml